

#ifndef __NXRM_PKG_KEY_PROFILE_HPP__
#define __NXRM_PKG_KEY_PROFILE_HPP__

#include <string>
#include "profile_basic.hpp"

namespace nxrm {
namespace pkg {


#define PROFILE_KEY_NODENAME  L"KEY_PROFILE"


/*
<KEY_PROFILE checksum="0x000000001432BA76">
    <KEY id="2E4823829738FF6E0FA3EC2B500EBB68198AF80E7D7B9264FA5035362DF8EE69">E62FE37691DB8A6FEEDFCC773C5F16A9230725E15DD7F497D9620486A9CC7977</KEY>
    <KEY id="E32A3EE3C6D9DB8C8FB2FEA0945E3B93BA5F2E82865358503452CDE3678077F7">F9B2B0EF90EFBAE6E1CCE00FAA834E10C00E4FD7040E8E7024E166EF8A6A89B1</KEY>
    <KEY id="E8839F1EA9362B7274E3D0DB37EF3AB86E59DA10480E141DEEC0956818CE2414">D438AEE2FF0EA8FA09B9E23A73A6E5BCAF285110F400B59A0BE092848613C21E</KEY>
    <KEY id="8EA8C7963E8CA026B0A58C5D06803CE6D69B4F431F776F6AE9DAFD1A21857893">492CCA229A996079697432727A6900B41D3F8F1D8B74FB93A75EB5BF824954A9</KEY>
    <KEY id="5AAA0CFE188544210EF8C2F4016A5A0701B756F09678B8D47C06C5207271C8ED">59AB7B2C52DFC13B573C263BA94A99B96945303CC77B8BB8FF3DC2E0933B1370</KEY>
    <KEY id="CE91ADA0D5C92F5243511F0B23087EE4B50FE42DF6CE202F4D4DDF485E58C7F8">5DCA82D6D013BC284894A40045571CE0765E369EDFC634E1BAF8F650FF4EC427</KEY>
    <KEY id="6C039D046966AFB34EA8C96F5107B8246EEA4412948220E99154BFCB9B1B1019">155E06021E6CC7A514F724AFCEFC3BFE1D0D24A49C31643FB91CBB345AABF9D1</KEY>
    <KEY id="C77F02A82E6E8A46FE182F8B39B4576D66D17F08AE91DB5B949F380332BAF80B">A5A23A5AF9A115F5511D09EFB0A7DDF221E7686F545710FFAF71CCFCF5489BB4</KEY>
    <KEY id="729EDF94781049F3613EAE44738E40151EDE6EB6812815CAC4E69BBEC620F429">46620858ED08A2C60738FBDB5A92C0667E67B7D15796B467A7B794CB5D6E8102</KEY>
    <KEY id="EEFCBAB37F049DA6514BC1B16422CF28C72F2B69EDCFA872543FDCF6097D3910">BE60D1A49F913CBC59165712EA6BFEAC3BB1A9E6E7769D8DC024CCD00BB7DB82</KEY>
</KEY_PROFILE>
*/


typedef std::pair<std::vector<UCHAR>, std::vector<UCHAR>>   KEYPAIR; 
typedef std::vector<KEYPAIR>                                KEYSARRAY; 

class CKeyProfile : public CProfile
{
public:
    CKeyProfile();
    virtual ~CKeyProfile();
    
    inline ULONGLONG GetChecksum() const throw() {return _checksum;}
    inline const KEYSARRAY& GetKeys() const throw() {return _keys;}
    inline KEYSARRAY& GetKeys() throw() {return _keys;}

    inline CKeyProfile& operator =(const CKeyProfile& profile) throw()
    {
        if(this != &profile) {
            ((CProfile*)this)->operator=(profile);
            _checksum = profile.GetChecksum();
            _keys = profile.GetKeys();
        }
        return *this;
    }

    inline void Clear() throw()
    {
        _checksum = 0;
        _keys.clear();
        CProfile::Clear();
    }

    bool InsertKey(const std::vector<UCHAR>& id, const std::vector<UCHAR>& key) throw();
    bool InsertKey(const std::wstring& id, const std::wstring& key) throw();
        
    ULONGLONG UpdateChecksum() throw();
    void FromXml(IXMLDOMNode* node);
    void ToXml(IXMLDOMDocument* doc, IXMLDOMNode* parent, IXMLDOMNode** node) const;

private:
    ULONGLONG   _checksum;
    KEYSARRAY   _keys;
};

    
}   // namespace nxrm::pkg
}   // namespace nxrm


#endif  // __NXRM_PKG_KEY_PROFILE_HPP__